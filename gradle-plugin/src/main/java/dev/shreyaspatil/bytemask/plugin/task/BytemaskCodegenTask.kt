/**
 * Copyright 2024 Shreyas Patil
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dev.shreyaspatil.bytemask.plugin.task

import dev.shreyaspatil.bytemask.core.encryption.EncryptionSpec
import dev.shreyaspatil.bytemask.core.encryption.Sha256DigestableKey
import dev.shreyaspatil.bytemask.plugin.codegen.ConfigClassGenerator
import dev.shreyaspatil.bytemask.plugin.codegen.PropertyAndValuesProvider
import java.io.File
import org.gradle.api.DefaultTask
import org.gradle.api.GradleException
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.provider.Property
import org.gradle.api.tasks.CacheableTask
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.InputFiles
import org.gradle.api.tasks.Optional
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.PathSensitive
import org.gradle.api.tasks.PathSensitivity
import org.gradle.api.tasks.TaskAction

/** Task to generate Kotlin class file with properties and values. */
@CacheableTask
abstract class BytemaskCodegenTask : DefaultTask() {
    /** Output directory to generate Kotlin class file. */
    @get:OutputDirectory abstract val outputDirectory: DirectoryProperty

    /** Properties files to read properties and values from. */
    @get:PathSensitive(PathSensitivity.RELATIVE)
    @get:InputFiles
    abstract val bytemaskPropFiles: Property<Collection<File>>

    /** Namespace of application / dynamic feature module. (e.g. com.example.app) */
    @get:Input abstract val applicationNamespace: Property<String>

    /** Class name of the generated class. (e.g. AppConfig). Default is `BytemaskConfig`. */
    @get:Input abstract val className: Property<String>

    /**
     * Encryption key to encrypt properties. Required if [enableEncryption] is true. Provide the
     * SHA-256 signature of the key by which app will be signed.
     */
    @get:Input @get:Optional abstract val encryptionKey: Property<Sha256DigestableKey>

    /**
     * Enable encryption for properties. Default is `false`. If enabled, [encryptionKey] is
     * required.
     */
    @get:Input abstract val enableEncryption: Property<Boolean>

    /** Encryption spec for encryption. Default is AES/CBC/PKCS5Padding. */
    @get:Input abstract val encryptionSpec: Property<EncryptionSpec>

    @Throws(GradleException::class)
    @TaskAction
    fun action() {
        val propFiles = bytemaskPropFiles.get().filter { it.isFile }

        if (propFiles.isEmpty()) {
            val message =
                """
                The Bytemask Plugin cannot function without `.properties` file. 
                Searched locations: ${
                    bytemaskPropFiles.get().joinToString { it.absolutePath }
                }
                """
                    .trimIndent()

            logger.error(message)
            return
        }

        // Delete all existing content of outputdir.
        val outputDir = outputDirectory.get().asFile
        outputDir.deleteRecursively()

        if (!outputDir.mkdirs()) {
            throw GradleException("Failed to create folder: $outputDir")
        }

        val encryptionDetail = getEncryptionDetail()

        // Generate code
        val codegen =
            ConfigClassGenerator(
                propertyAndValuesProvider = PropertyAndValuesProvider(propFiles),
                applicationNamespace = applicationNamespace.get(),
                className = className.get(),
                outputDir = outputDir,
                encryptionDetail = encryptionDetail
            )

        val generatedFile = codegen.generate()

        logger.info("Generated Bytemask config file: ${generatedFile.absolutePath}")
    }

    private fun getEncryptionDetail(): ConfigClassGenerator.EncryptionDetail? =
        if (enableEncryption.get()) {
            if (encryptionKey.orNull == null) {
                throw GradleException("Encryption key is required for encryption.")
            }

            ConfigClassGenerator.EncryptionDetail(
                encryptionSpec = encryptionSpec.get(),
                encryptionKey = encryptionKey.get()
            )
        } else {
            null
        }
}
